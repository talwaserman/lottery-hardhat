/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  VRFV2ProviderMock,
  VRFV2ProviderMockInterface,
} from "../../../../contracts/test/VRFV2ProviderMock.sol/VRFV2ProviderMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint64",
        name: "_subscriptionId",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferRequested",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "RequestFailedByGasLimit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "RequestFulfilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "numWords",
        type: "uint32",
      },
    ],
    name: "RequestSent",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "addToAllowList",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lastRequestId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "removeFromAllowList",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "requestIds",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "requestRandomWords",
    outputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "s_requests",
    outputs: [
      {
        internalType: "bool",
        name: "fulfilled",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "exists",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405260018060146101000a81548163ffffffff021916908363ffffffff16021790555060405180602001604052807fada6759e0857cc07c90201e9addae33bc69d44339efb9b93b9c9079255c72413815250600290600162000066929190620002f8565b503480156200007457600080fd5b50604051620016a9380380620016a983398181016040528101906200009a9190620003b3565b338060008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036200010f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001069062000446565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161462000196576200019581620001c960201b60201c565b5b50505080600360006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050620004da565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200023a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200023190620004b8565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b82805482825590600052602060002090810192821562000337579160200282015b828111156200033657825182559160200191906001019062000319565b5b5090506200034691906200034a565b5090565b5b80821115620003655760008160009055506001016200034b565b5090565b600080fd5b600067ffffffffffffffff82169050919050565b6200038d816200036e565b81146200039957600080fd5b50565b600081519050620003ad8162000382565b92915050565b600060208284031215620003cc57620003cb62000369565b5b6000620003dc848285016200039c565b91505092915050565b600082825260208201905092915050565b7f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000600082015250565b60006200042e601883620003e5565b91506200043b82620003f6565b602082019050919050565b6000602082019050818103600083015262000461816200041f565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000620004a0601783620003e5565b9150620004ad8262000468565b602082019050919050565b60006020820190508181036000830152620004d38162000491565b9050919050565b6111bf80620004ea6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063a168fa8911610066578063a168fa891461010c578063e0c862891461013d578063eba8dabc1461015b578063f2fde38b14610177578063fc2a88c31461019357610093565b806331f591021461009857806379ba5097146100b45780638796ba8c146100be5780638da5cb5b146100ee575b600080fd5b6100b260048036038101906100ad9190610b98565b6101b1565b005b6100bc610214565b005b6100d860048036038101906100d39190610bfb565b6103a9565b6040516100e59190610c37565b60405180910390f35b6100f66103cd565b6040516101039190610c61565b60405180910390f35b61012660048036038101906101219190610bfb565b6103f6565b604051610134929190610c97565b60405180910390f35b610145610434565b6040516101529190610c37565b60405180910390f35b61017560048036038101906101709190610b98565b6105df565b005b610191600480360381019061018c9190610b98565b610642565b005b61019b610656565b6040516101a89190610c37565b60405180910390f35b6101b961065c565b6001600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029b90610d1d565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600781815481106103b957600080fd5b906000526020600020016000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60066020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16905082565b600061043e6103cd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806104c7575060011515600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b610506576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fd90610d89565b60405180910390fd5b600781908060018154018082558091505060019003906000526020600020016000909190919091505580600881905550336004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fcc58b13ad3eab50626c6a6300b1d139cd6ebb1688a7cced9461c2f7e762665ee81600160149054906101000a900463ffffffff166040516105cb929190610dc8565b60405180910390a16105dc816106ec565b90565b6105e761065c565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b61064a61065c565b6106538161099a565b50565b60085481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e190610e3d565b60405180910390fd5b565b6006600082815260200190815260200160002060000160019054906101000a900460ff1661074f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074690610ea9565b60405180910390fd5b60016006600083815260200190815260200160002060000160006101000a81548160ff0219169083151502179055506002600660008381526020019081526020016000206001019080546107a4929190610ac6565b5060006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166207a12060026040516024016108079190610fd7565b6040516020818303038152906040527f159020fd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610891919061106a565b60006040518083038160008787f1925050503d80600081146108cf576040519150601f19603f3d011682016040523d82523d6000602084013e6108d4565b606091505b50509050600015158115150361091c577f4405f5c0434912221b5a3c5b21a2e4cef3d33d6ea63db3a3fe5fab42a757ef69826040516109139190610c37565b60405180910390a15b8061095c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610953906110cd565b60405180910390fd5b7ffe2e2d779dba245964d4e3ef9b994be63856fd568bf7d3ca9e224755cb1bd54d82600260405161098e9291906110ed565b60405180910390a15050565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ff90611169565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b828054828255906000526020600020908101928215610b075760005260206000209182015b82811115610b06578254825591600101919060010190610aeb565b5b509050610b149190610b18565b5090565b5b80821115610b31576000816000905550600101610b19565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b6582610b3a565b9050919050565b610b7581610b5a565b8114610b8057600080fd5b50565b600081359050610b9281610b6c565b92915050565b600060208284031215610bae57610bad610b35565b5b6000610bbc84828501610b83565b91505092915050565b6000819050919050565b610bd881610bc5565b8114610be357600080fd5b50565b600081359050610bf581610bcf565b92915050565b600060208284031215610c1157610c10610b35565b5b6000610c1f84828501610be6565b91505092915050565b610c3181610bc5565b82525050565b6000602082019050610c4c6000830184610c28565b92915050565b610c5b81610b5a565b82525050565b6000602082019050610c766000830184610c52565b92915050565b60008115159050919050565b610c9181610c7c565b82525050565b6000604082019050610cac6000830185610c88565b610cb96020830184610c88565b9392505050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b6000610d07601683610cc0565b9150610d1282610cd1565b602082019050919050565b60006020820190508181036000830152610d3681610cfa565b9050919050565b7f43616c6c6572206973206e6f7420617574686f72697a65640000000000000000600082015250565b6000610d73601883610cc0565b9150610d7e82610d3d565b602082019050919050565b60006020820190508181036000830152610da281610d66565b9050919050565b600063ffffffff82169050919050565b610dc281610da9565b82525050565b6000604082019050610ddd6000830185610c28565b610dea6020830184610db9565b9392505050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b6000610e27601683610cc0565b9150610e3282610df1565b602082019050919050565b60006020820190508181036000830152610e5681610e1a565b9050919050565b7f72657175657374206e6f7420666f756e64000000000000000000000000000000600082015250565b6000610e93601183610cc0565b9150610e9e82610e5d565b602082019050919050565b60006020820190508181036000830152610ec281610e86565b9050919050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b610f0381610bc5565b82525050565b6000610f158383610efa565b60208301905092915050565b60008160001c9050919050565b6000819050919050565b6000610f4b610f4683610f21565b610f2e565b9050919050565b6000610f5e8254610f38565b9050919050565b6000600182019050919050565b6000610f7d82610ec9565b610f878185610ed4565b9350610f9283610ee5565b8060005b83811015610fca57610fa782610f52565b610fb18882610f09565b9750610fbc83610f65565b925050600181019050610f96565b5085935050505092915050565b60006020820190508181036000830152610ff18184610f72565b905092915050565b600081519050919050565b600081905092915050565b60005b8381101561102d578082015181840152602081019050611012565b60008484015250505050565b600061104482610ff9565b61104e8185611004565b935061105e81856020860161100f565b80840191505092915050565b60006110768284611039565b915081905092915050565b7f476173206c696d697420776173206e6f742073756666696369656e7400000000600082015250565b60006110b7601c83610cc0565b91506110c282611081565b602082019050919050565b600060208201905081810360008301526110e6816110aa565b9050919050565b60006040820190506111026000830185610c28565b81810360208301526111148184610f72565b90509392505050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000611153601783610cc0565b915061115e8261111d565b602082019050919050565b6000602082019050818103600083015261118281611146565b905091905056fea26469706673582212202ee7c4a9844845f620ea9a723eb56b6d457f06a972758350289824ae1fe78cee64736f6c63430008140033";

type VRFV2ProviderMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VRFV2ProviderMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VRFV2ProviderMock__factory extends ContractFactory {
  constructor(...args: VRFV2ProviderMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _subscriptionId: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_subscriptionId, overrides || {});
  }
  override deploy(
    _subscriptionId: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_subscriptionId, overrides || {}) as Promise<
      VRFV2ProviderMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): VRFV2ProviderMock__factory {
    return super.connect(runner) as VRFV2ProviderMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VRFV2ProviderMockInterface {
    return new Interface(_abi) as VRFV2ProviderMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): VRFV2ProviderMock {
    return new Contract(address, _abi, runner) as unknown as VRFV2ProviderMock;
  }
}
