/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Lottery {
  export type LottryContestLiteStruct = {
    id: BigNumberish;
    winningPrize: BigNumberish;
    startTime: BigNumberish;
    closeTime: BigNumberish;
    joinedCounter: BigNumberish;
    chainType: string;
  };

  export type LottryContestLiteStructOutput = [
    id: bigint,
    winningPrize: bigint,
    startTime: bigint,
    closeTime: bigint,
    joinedCounter: bigint,
    chainType: string
  ] & {
    id: bigint;
    winningPrize: bigint;
    startTime: bigint;
    closeTime: bigint;
    joinedCounter: bigint;
    chainType: string;
  };

  export type LotteryTicketStruct = {
    owner: AddressLike;
    lotteryId: BigNumberish;
    number: BigNumberish;
  };

  export type LotteryTicketStructOutput = [
    owner: string,
    lotteryId: bigint,
    number: bigint
  ] & { owner: string; lotteryId: bigint; number: bigint };
}

export interface LotteryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkIfIWonTheLottery"
      | "checkIfLotteryIsLiveById"
      | "checkLotteryPrize"
      | "createNewLottery"
      | "getAllFunds"
      | "getContractBalance"
      | "getLotteries"
      | "getLotteryPrize"
      | "getNumberOfJoinersForLotteryId"
      | "getUserTicketForLottery"
      | "getUserTickets"
      | "getWinningNumberForLottery"
      | "joinLottery"
      | "vrfCallback"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LogMessage"
      | "emitLotteryCreated"
      | "emitLotteryJoined"
      | "emitRequestedRandomNumber"
      | "vrfFailedByGasLimit"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkIfIWonTheLottery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIfLotteryIsLiveById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkLotteryPrize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewLottery",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLotteries",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLotteryPrize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfJoinersForLotteryId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTicketForLottery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTickets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWinningNumberForLottery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinLottery",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "vrfCallback",
    values: [BigNumberish[], BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkIfIWonTheLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIfLotteryIsLiveById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkLotteryPrize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLotteries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLotteryPrize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfJoinersForLotteryId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTicketForLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWinningNumberForLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfCallback",
    data: BytesLike
  ): Result;
}

export namespace LogMessageEvent {
  export type InputTuple = [message: string];
  export type OutputTuple = [message: string];
  export interface OutputObject {
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace emitLotteryCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    owner: AddressLike,
    startTime: BigNumberish,
    closeTime: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    owner: string,
    startTime: bigint,
    closeTime: bigint
  ];
  export interface OutputObject {
    id: bigint;
    owner: string;
    startTime: bigint;
    closeTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace emitLotteryJoinedEvent {
  export type InputTuple = [id: BigNumberish, joinerAddress: AddressLike];
  export type OutputTuple = [id: bigint, joinerAddress: string];
  export interface OutputObject {
    id: bigint;
    joinerAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace emitRequestedRandomNumberEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace vrfFailedByGasLimitEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Lottery extends BaseContract {
  connect(runner?: ContractRunner | null): Lottery;
  waitForDeployment(): Promise<this>;

  interface: LotteryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkIfIWonTheLottery: TypedContractMethod<
    [lotteryId: BigNumberish],
    [boolean],
    "view"
  >;

  checkIfLotteryIsLiveById: TypedContractMethod<
    [lotteryId: BigNumberish],
    [boolean],
    "view"
  >;

  checkLotteryPrize: TypedContractMethod<
    [lotteryId: BigNumberish],
    [bigint],
    "view"
  >;

  createNewLottery: TypedContractMethod<
    [
      startTimeInSeconds: BigNumberish,
      endTimeInSeconds: BigNumberish,
      limitOfJoiners: BigNumberish,
      chainType: string
    ],
    [boolean],
    "payable"
  >;

  getAllFunds: TypedContractMethod<[], [void], "payable">;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getLotteries: TypedContractMethod<
    [],
    [Lottery.LottryContestLiteStructOutput[]],
    "view"
  >;

  getLotteryPrize: TypedContractMethod<
    [lotteryId: BigNumberish],
    [void],
    "payable"
  >;

  getNumberOfJoinersForLotteryId: TypedContractMethod<
    [lotteryId: BigNumberish],
    [bigint],
    "view"
  >;

  getUserTicketForLottery: TypedContractMethod<
    [lotteryId: BigNumberish],
    [Lottery.LotteryTicketStructOutput],
    "view"
  >;

  getUserTickets: TypedContractMethod<[], [bigint[]], "view">;

  getWinningNumberForLottery: TypedContractMethod<
    [id: BigNumberish],
    [void],
    "nonpayable"
  >;

  joinLottery: TypedContractMethod<
    [lotteryId: BigNumberish, number: string],
    [Lottery.LotteryTicketStructOutput],
    "payable"
  >;

  vrfCallback: TypedContractMethod<
    [_randomNumbers: BigNumberish[], id: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkIfIWonTheLottery"
  ): TypedContractMethod<[lotteryId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "checkIfLotteryIsLiveById"
  ): TypedContractMethod<[lotteryId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "checkLotteryPrize"
  ): TypedContractMethod<[lotteryId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "createNewLottery"
  ): TypedContractMethod<
    [
      startTimeInSeconds: BigNumberish,
      endTimeInSeconds: BigNumberish,
      limitOfJoiners: BigNumberish,
      chainType: string
    ],
    [boolean],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getAllFunds"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLotteries"
  ): TypedContractMethod<[], [Lottery.LottryContestLiteStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getLotteryPrize"
  ): TypedContractMethod<[lotteryId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "getNumberOfJoinersForLotteryId"
  ): TypedContractMethod<[lotteryId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserTicketForLottery"
  ): TypedContractMethod<
    [lotteryId: BigNumberish],
    [Lottery.LotteryTicketStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserTickets"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getWinningNumberForLottery"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "joinLottery"
  ): TypedContractMethod<
    [lotteryId: BigNumberish, number: string],
    [Lottery.LotteryTicketStructOutput],
    "payable"
  >;
  getFunction(
    nameOrSignature: "vrfCallback"
  ): TypedContractMethod<
    [_randomNumbers: BigNumberish[], id: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "LogMessage"
  ): TypedContractEvent<
    LogMessageEvent.InputTuple,
    LogMessageEvent.OutputTuple,
    LogMessageEvent.OutputObject
  >;
  getEvent(
    key: "emitLotteryCreated"
  ): TypedContractEvent<
    emitLotteryCreatedEvent.InputTuple,
    emitLotteryCreatedEvent.OutputTuple,
    emitLotteryCreatedEvent.OutputObject
  >;
  getEvent(
    key: "emitLotteryJoined"
  ): TypedContractEvent<
    emitLotteryJoinedEvent.InputTuple,
    emitLotteryJoinedEvent.OutputTuple,
    emitLotteryJoinedEvent.OutputObject
  >;
  getEvent(
    key: "emitRequestedRandomNumber"
  ): TypedContractEvent<
    emitRequestedRandomNumberEvent.InputTuple,
    emitRequestedRandomNumberEvent.OutputTuple,
    emitRequestedRandomNumberEvent.OutputObject
  >;
  getEvent(
    key: "vrfFailedByGasLimit"
  ): TypedContractEvent<
    vrfFailedByGasLimitEvent.InputTuple,
    vrfFailedByGasLimitEvent.OutputTuple,
    vrfFailedByGasLimitEvent.OutputObject
  >;

  filters: {
    "LogMessage(string)": TypedContractEvent<
      LogMessageEvent.InputTuple,
      LogMessageEvent.OutputTuple,
      LogMessageEvent.OutputObject
    >;
    LogMessage: TypedContractEvent<
      LogMessageEvent.InputTuple,
      LogMessageEvent.OutputTuple,
      LogMessageEvent.OutputObject
    >;

    "emitLotteryCreated(uint256,address,uint256,uint256)": TypedContractEvent<
      emitLotteryCreatedEvent.InputTuple,
      emitLotteryCreatedEvent.OutputTuple,
      emitLotteryCreatedEvent.OutputObject
    >;
    emitLotteryCreated: TypedContractEvent<
      emitLotteryCreatedEvent.InputTuple,
      emitLotteryCreatedEvent.OutputTuple,
      emitLotteryCreatedEvent.OutputObject
    >;

    "emitLotteryJoined(uint256,address)": TypedContractEvent<
      emitLotteryJoinedEvent.InputTuple,
      emitLotteryJoinedEvent.OutputTuple,
      emitLotteryJoinedEvent.OutputObject
    >;
    emitLotteryJoined: TypedContractEvent<
      emitLotteryJoinedEvent.InputTuple,
      emitLotteryJoinedEvent.OutputTuple,
      emitLotteryJoinedEvent.OutputObject
    >;

    "emitRequestedRandomNumber(uint256)": TypedContractEvent<
      emitRequestedRandomNumberEvent.InputTuple,
      emitRequestedRandomNumberEvent.OutputTuple,
      emitRequestedRandomNumberEvent.OutputObject
    >;
    emitRequestedRandomNumber: TypedContractEvent<
      emitRequestedRandomNumberEvent.InputTuple,
      emitRequestedRandomNumberEvent.OutputTuple,
      emitRequestedRandomNumberEvent.OutputObject
    >;

    "vrfFailedByGasLimit()": TypedContractEvent<
      vrfFailedByGasLimitEvent.InputTuple,
      vrfFailedByGasLimitEvent.OutputTuple,
      vrfFailedByGasLimitEvent.OutputObject
    >;
    vrfFailedByGasLimit: TypedContractEvent<
      vrfFailedByGasLimitEvent.InputTuple,
      vrfFailedByGasLimitEvent.OutputTuple,
      vrfFailedByGasLimitEvent.OutputObject
    >;
  };
}
