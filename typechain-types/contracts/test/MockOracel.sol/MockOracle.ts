/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface MockOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EXPIRY_TIME"
      | "cancelOracleRequest"
      | "fulfillOracleRequest"
      | "getChainlinkToken"
      | "onTokenTransfer"
      | "oracleRequest"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CancelOracleRequest" | "OracleRequest"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "EXPIRY_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOracleRequest",
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillOracleRequest",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainlinkToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onTokenTransfer",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleRequest",
    values: [
      AddressLike,
      BigNumberish,
      BytesLike,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "EXPIRY_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOracleRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillOracleRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainlinkToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleRequest",
    data: BytesLike
  ): Result;
}

export namespace CancelOracleRequestEvent {
  export type InputTuple = [requestId: BytesLike];
  export type OutputTuple = [requestId: string];
  export interface OutputObject {
    requestId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleRequestEvent {
  export type InputTuple = [
    specId: BytesLike,
    requester: AddressLike,
    requestId: BytesLike,
    payment: BigNumberish,
    callbackAddr: AddressLike,
    callbackFunctionId: BytesLike,
    cancelExpiration: BigNumberish,
    dataVersion: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    specId: string,
    requester: string,
    requestId: string,
    payment: bigint,
    callbackAddr: string,
    callbackFunctionId: string,
    cancelExpiration: bigint,
    dataVersion: bigint,
    data: string
  ];
  export interface OutputObject {
    specId: string;
    requester: string;
    requestId: string;
    payment: bigint;
    callbackAddr: string;
    callbackFunctionId: string;
    cancelExpiration: bigint;
    dataVersion: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockOracle extends BaseContract {
  connect(runner?: ContractRunner | null): MockOracle;
  waitForDeployment(): Promise<this>;

  interface: MockOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EXPIRY_TIME: TypedContractMethod<[], [bigint], "view">;

  cancelOracleRequest: TypedContractMethod<
    [
      _requestId: BytesLike,
      _payment: BigNumberish,
      arg2: BytesLike,
      _expiration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  fulfillOracleRequest: TypedContractMethod<
    [_requestId: BytesLike, _data: BytesLike],
    [boolean],
    "nonpayable"
  >;

  getChainlinkToken: TypedContractMethod<[], [string], "view">;

  onTokenTransfer: TypedContractMethod<
    [_sender: AddressLike, _amount: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  oracleRequest: TypedContractMethod<
    [
      _sender: AddressLike,
      _payment: BigNumberish,
      _specId: BytesLike,
      _callbackAddress: AddressLike,
      _callbackFunctionId: BytesLike,
      _nonce: BigNumberish,
      _dataVersion: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EXPIRY_TIME"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelOracleRequest"
  ): TypedContractMethod<
    [
      _requestId: BytesLike,
      _payment: BigNumberish,
      arg2: BytesLike,
      _expiration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fulfillOracleRequest"
  ): TypedContractMethod<
    [_requestId: BytesLike, _data: BytesLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getChainlinkToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onTokenTransfer"
  ): TypedContractMethod<
    [_sender: AddressLike, _amount: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "oracleRequest"
  ): TypedContractMethod<
    [
      _sender: AddressLike,
      _payment: BigNumberish,
      _specId: BytesLike,
      _callbackAddress: AddressLike,
      _callbackFunctionId: BytesLike,
      _nonce: BigNumberish,
      _dataVersion: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CancelOracleRequest"
  ): TypedContractEvent<
    CancelOracleRequestEvent.InputTuple,
    CancelOracleRequestEvent.OutputTuple,
    CancelOracleRequestEvent.OutputObject
  >;
  getEvent(
    key: "OracleRequest"
  ): TypedContractEvent<
    OracleRequestEvent.InputTuple,
    OracleRequestEvent.OutputTuple,
    OracleRequestEvent.OutputObject
  >;

  filters: {
    "CancelOracleRequest(bytes32)": TypedContractEvent<
      CancelOracleRequestEvent.InputTuple,
      CancelOracleRequestEvent.OutputTuple,
      CancelOracleRequestEvent.OutputObject
    >;
    CancelOracleRequest: TypedContractEvent<
      CancelOracleRequestEvent.InputTuple,
      CancelOracleRequestEvent.OutputTuple,
      CancelOracleRequestEvent.OutputObject
    >;

    "OracleRequest(bytes32,address,bytes32,uint256,address,bytes4,uint256,uint256,bytes)": TypedContractEvent<
      OracleRequestEvent.InputTuple,
      OracleRequestEvent.OutputTuple,
      OracleRequestEvent.OutputObject
    >;
    OracleRequest: TypedContractEvent<
      OracleRequestEvent.InputTuple,
      OracleRequestEvent.OutputTuple,
      OracleRequestEvent.OutputObject
    >;
  };
}
